{"version":3,"sources":["store/reducers.ts","store/index.ts","components/EditTrackModal.tsx","api/spotify.ts","api/deezer.ts","utils.ts","components/TrackListItem.tsx","store/actions.ts","components/SelectedTrackCard.tsx","components/TrackStep.tsx","components/ValidationStep.tsx","components/ExportStep.tsx","components/Dashboard.tsx","components/Playlists.tsx","components/Home.tsx","components/Header.tsx","Routes.tsx","App.tsx","index.tsx"],"names":["initialState","tracks","csvLines","currentStep","currentLine","persistConfig","key","storage","persistedReducer","persistReducer","state","action","type","track","lines","lineIndex","step","newTracks","remove","id","newData","index","findIndex","splice","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","EditTrackModal","visible","editTrack","closeModal","useState","confirmLoading","setConfirmLoading","useForm","form","useEffect","setFieldsValue","artist","title","year","onOk","validateFields","then","values","resetFields","onCancel","name","Item","label","rules","required","spotifyAuthToken","getSpotifyAuthToken","a","fetch","res","json","body","status","console","log","error_description","access_token","spSearchTrack","query","requestOptions","method","headers","Authorization","redirect","dzSearchTrack","normalizedQuery","normalize","replace","convertArtistsArrayToString","artists","map","join","getSpotifyReleaseYear","album","precision","release_date_precision","date","release_date","parseInt","substring","Text","SpotifyTrackListItem","play","selectTrack","preview_url","displayArtist","displayReleaseYear","actions","icon","CaretRightOutlined","onClick","Meta","avatar","shape","src","images","url","description","DeezerTrackListItem","preview","cover","setCurrentLine","setCurrentStep","SelectedTrackCard","selectedTrack","handleEdit","goToNextLine","dispatch","useDispatch","extra","message","error","size","coverImage","TrackStep","isLastLine","endIntegration","lineAmount","currentCsvLine","useSelector","spotifyTracks","setSpotifyTracks","deezerTracks","setDeezerTracks","previewUrl","setSelectedTrack","isModalOpen","setIsModalOpen","undefined","spotifySearchResults","items","deezerSearchResults","data","search","selectSpotifyTrack","trackObject","external_ids","popularity","audio","isrc","spotifyId","provider","uuid","getTrackFromSpotifyTrackObject","selectDeezerTrack","deezerId","toString","cover_small","getTrackFromDeezerTrackObject","direction","autoPlay","controls","gutter","span","disabled","dataSource","renderItem","Title","Column","ValidationStep","editingId","setEditingId","isEditing","record","saveEdits","edits","newTrack","errorMessage","errorFields","item","errors","cancel","CheckOutlined","component","level","length","dataIndex","render","image","CaretRightFilled","PauseOutlined","noStyle","whitespace","ellipsis","sorter","b","color","toUpperCase","text","edit","onConfirm","okText","cancelText","okType","DeleteFilled","ExportStep","subTitle","Step","Dashboard","isParsing","setIsParsing","style","width","current","Dragger","accept","beforeUpload","file","papaConfig","skipEnmptyLines","fastMode","before","complete","results","line","Papa","parse","multiple","showUploadList","InboxOutlined","Playlists","Home","AntHeader","Header","backgroundColor","display","justifyContent","alignItems","theme","mode","to","PlusCircleOutlined","Content","Routes","height","padding","margin","path","exact","store","createStore","persistor","persistStore","Store","App","rootEl","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.2fbdea94.chunk.js","sourcesContent":["// import { ADD_TRACK, ActionTypes, RootState } from \"./types\";\nimport { remove } from \"lodash\";\n\nimport { Track, Line } from \"../types/types\";\nimport { Reducer } from \"redux\";\n\nexport const ADD_TRACK = \"ADD_TRACK\";\nexport const SET_CSV_LINES = \"SET_CSV_LINES\";\nexport const SET_CURRENT_LINE = \"SET_CURRENT_LINE\";\nexport const SET_CURRENT_STEP = \"SET_CURRENT_STEP\";\nexport const CANCEL_IMPORT = \"CANCEL_IMPORT\";\nexport const DELETE_TRACK = \"DELETE_TRACK\";\nexport const EDIT_TRACK = \"EDIT_TRACK\";\n\ninterface AddTrackAction {\n  type: typeof ADD_TRACK;\n  track: Track;\n}\n\ninterface SetCsvLinesAction {\n  type: typeof SET_CSV_LINES;\n  lines: Line[];\n}\n\ninterface SetCurrentLineAction {\n  type: typeof SET_CURRENT_LINE;\n  lineIndex: number;\n}\n\ninterface SetCurrentStep {\n  type: typeof SET_CURRENT_STEP;\n  step: number;\n}\n\ninterface CancelImport {\n  type: typeof CANCEL_IMPORT;\n}\n\ninterface DeleteTrack {\n  type: typeof DELETE_TRACK;\n  id: string;\n}\n\ninterface EditTrack {\n  type: typeof EDIT_TRACK;\n  track: Track;\n}\n\nexport interface RootState {\n  tracks: Track[];\n  csvLines: Line[];\n  currentStep: number;\n  currentLine: number;\n}\n\nexport type ActionTypes =\n  | AddTrackAction\n  | SetCsvLinesAction\n  | SetCurrentLineAction\n  | SetCurrentStep\n  | CancelImport\n  | DeleteTrack\n  | EditTrack;\n\nconst initialState: RootState = {\n  tracks: [],\n  csvLines: [],\n  currentStep: 0,\n  currentLine: 0,\n};\n\nexport const tracksReducer: Reducer<RootState, ActionTypes> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case ADD_TRACK:\n      return {\n        ...state,\n        tracks: [...state.tracks, action.track],\n      };\n    case SET_CSV_LINES:\n      return {\n        ...state,\n        csvLines: action.lines,\n      };\n    case SET_CURRENT_LINE:\n      return {\n        ...state,\n        currentLine: action.lineIndex,\n      };\n    case SET_CURRENT_STEP:\n      return {\n        ...state,\n        currentStep: action.step,\n      };\n    case CANCEL_IMPORT:\n      return {\n        tracks: [],\n        csvLines: [],\n        currentStep: 0,\n        currentLine: 0,\n      };\n    case DELETE_TRACK:\n      const newTracks = remove(state.tracks, (track) => {\n        return track.id !== action.id;\n      });\n      return {\n        ...state,\n        tracks: newTracks,\n      };\n    case EDIT_TRACK:\n      const newData = [...state.tracks];\n      const index = newData.findIndex((track) => track.id === action.track.id);\n      if (index > -1) {\n        // const item = newData[index];\n        newData.splice(index, 1, { ...action.track });\n        return {\n          ...state,\n          tracks: newData,\n        };\n      }\n      newData.push(action.track);\n      return {\n        ...state,\n        tracks: newData,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, compose } from \"redux\";\nimport { tracksReducer, RootState } from \"./reducers\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { PersistPartial } from \"redux-persist/es/persistReducer\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, tracksReducer);\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n  let store = createStore<RootState & PersistPartial, any, any, any>(\n    persistedReducer,\n    composeEnhancers()\n  );\n  let persistor = persistStore(store);\n  return { store, persistor };\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Input, Modal } from \"antd\";\nimport { Track } from \"../types/types\";\n\ninterface ModalProps {\n  track: Track;\n  visible: boolean;\n  editTrack: (track: Track) => void;\n  closeModal: () => void;\n}\n\nconst EditTrackModal: React.FC<ModalProps> = ({\n  track,\n  visible,\n  editTrack,\n  closeModal,\n}) => {\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const [form] = Form.useForm();\n  useEffect(() => {\n    form.setFieldsValue({\n      artist: track.artist,\n      title: track.title,\n      year: track.year,\n    });\n  }, [form, track]);\n  const handleOk = () => {\n    setConfirmLoading(true);\n    form.validateFields().then((values) => {\n      form.resetFields();\n      editTrack({ ...track, ...values });\n    });\n    setConfirmLoading(false);\n    closeModal();\n  };\n  const handleCancel = () => {\n    closeModal();\n  };\n  return (\n    <Modal\n      visible={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      confirmLoading={confirmLoading}\n    >\n      <Form form={form} name=\"edit-track\">\n        <Form.Item\n          name=\"artist\"\n          label=\"Artiste(s)\"\n          rules={[{ required: true }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item name=\"title\" label=\"Titre\" rules={[{ required: true }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"year\"\n          label=\"Année de sortie\"\n          rules={[{ required: true }]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default EditTrackModal;\n","let spotifyAuthToken: string | null = null;\n\nconst getSpotifyAuthToken = async () => {\n  const res = await fetch(\"/spotifyToken\");\n  const body = await res.json();\n  if (res.status !== 200) {\n    console.log(`Error: ${body.error_description}`);\n  }\n  spotifyAuthToken = body.access_token;\n};\n\ngetSpotifyAuthToken();\n\nconst spSearchTrack = async (query: string) => {\n  if (!spotifyAuthToken) {\n    await getSpotifyAuthToken();\n  }\n  const redirect: \"follow\" | \"error\" | \"manual\" | \"undefined\" = \"follow\";\n  var requestOptions = {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${spotifyAuthToken}`,\n    },\n    redirect,\n  };\n  const res = await fetch(\n    `https://api.spotify.com/v1/search?q=${query}&type=track`,\n    requestOptions\n  );\n  const json = await res.json();\n  return json;\n};\n\nexport { spSearchTrack };\n","const dzSearchTrack = async (query: string) => {\n  try {\n    const normalizedQuery = query\n      .normalize(\"NFD\")\n      .replace(/[\\u0300-\\u036f]/g, \"\");\n    const res = await fetch(`/deezerTrack?q=${normalizedQuery}`);\n    const json = await res.json();\n    return json;\n  } catch {\n    console.log(\"error\");\n  }\n};\n\nexport { dzSearchTrack };\n","import { v4 as uuid } from \"uuid\";\n\nimport { SpotifyApi } from \"./types/spotify\";\nimport { Track } from \"./types/types\";\nimport { DeezerApi } from \"./types/deezer\";\n\nexport const convertArtistsArrayToString = (artists: any) => {\n  const artistsName = artists.map((artist: any) => artist.name);\n  return artistsName.join(\", \");\n};\n\n/* ———— DEEZER UTILS ————— */\n\nexport const getTrackFromDeezerTrackObject = ({\n  title,\n  id,\n  preview,\n  artist,\n  isrc,\n  release_date,\n  album,\n}: DeezerApi.TrackObject) => {\n  const track: Track = {\n    audio: preview,\n    artist: artist.name,\n    deezerId: id.toString(),\n    isrc,\n    year: release_date ? parseInt(release_date, 10) : undefined,\n    title,\n    coverImage: album.cover_small,\n    provider: \"deezer\",\n    id: uuid(),\n  };\n  return track;\n};\n\n/* ———— SPOTIFY UTILS ————— */\n\nexport const getSpotifyReleaseYear = (\n  album: SpotifyApi.AlbumObjectSimplified\n) => {\n  const precision = album.release_date_precision;\n  const date = album.release_date;\n  if (precision === \"year\") {\n    return parseInt(date, 10);\n  }\n  return parseInt(date.substring(0, 4), 10);\n};\n\nexport const getTrackFromSpotifyTrackObject = ({\n  preview_url,\n  name,\n  artists,\n  external_ids,\n  id,\n  popularity,\n  album,\n}: SpotifyApi.TrackObjectFull) => {\n  if (preview_url) {\n    const track: Track = {\n      audio: preview_url,\n      title: name,\n      artist: convertArtistsArrayToString(artists),\n      isrc: external_ids.isrc,\n      spotifyId: id,\n      popularity,\n      year: getSpotifyReleaseYear(album),\n      coverImage: album.images[0].url,\n      provider: \"spotify\",\n      id: uuid(),\n    };\n    return track;\n  }\n};\n","import { Avatar, Button, List, Typography } from \"antd\";\nimport React from \"react\";\nimport { SpotifyApi } from \"../types/spotify\";\nimport { DeezerApi } from \"../types/deezer\";\nimport { convertArtistsArrayToString, getSpotifyReleaseYear } from \"../utils\";\nimport { CaretRightOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\ninterface SpotifyProps {\n  track: SpotifyApi.TrackObjectFull;\n  play: (preview: string) => void;\n  selectTrack: (track: SpotifyApi.TrackObjectFull) => void;\n}\n\ninterface DeezerProps {\n  track: DeezerApi.TrackObject;\n  play: (preview: string) => void;\n  selectTrack: (track: DeezerApi.TrackObject) => void;\n}\n\nexport const SpotifyTrackListItem: React.FC<SpotifyProps> = ({\n  track,\n  play,\n  selectTrack,\n}) => {\n  const { preview_url, name, artists, album } = track;\n  const displayArtist = convertArtistsArrayToString(artists);\n  const displayReleaseYear = getSpotifyReleaseYear(album);\n  return (\n    <List.Item\n      actions={\n        preview_url\n          ? [\n              <Button\n                icon={<CaretRightOutlined />}\n                onClick={() => play(preview_url)}\n              />,\n              <Button onClick={() => selectTrack(track)}>Sélectionner</Button>,\n            ]\n          : []\n      }\n    >\n      <List.Item.Meta\n        avatar={<Avatar shape=\"square\" src={album.images[0].url} />}\n        title={name}\n        description={displayArtist}\n      />\n      <Text type=\"secondary\">{displayReleaseYear || \"?\"}</Text>\n    </List.Item>\n  );\n};\n\nexport const DeezerTrackListItem: React.FC<DeezerProps> = ({\n  track,\n  play,\n  selectTrack,\n}) => {\n  const { preview, artist, title, album } = track;\n  return (\n    <List.Item\n      actions={\n        preview\n          ? [\n              <Button\n                icon={<CaretRightOutlined />}\n                onClick={() => play(preview)}\n              />,\n              <Button onClick={() => selectTrack(track)}>Sélectionner</Button>,\n            ]\n          : []\n      }\n    >\n      <List.Item.Meta\n        avatar={<Avatar shape=\"square\" src={album.cover} />}\n        title={title}\n        description={artist.name}\n      />\n      <Text type=\"secondary\">{album.release_date || \"?\"}</Text>\n    </List.Item>\n  );\n};\n","import { Track, Line } from \"../types/types\";\nimport {\n  ADD_TRACK,\n  SET_CSV_LINES,\n  SET_CURRENT_LINE,\n  SET_CURRENT_STEP,\n  CANCEL_IMPORT,\n  DELETE_TRACK,\n  EDIT_TRACK,\n} from \"./reducers\";\n\nexport const addTrack = (newTrack: Track) => {\n  return {\n    type: ADD_TRACK,\n    track: newTrack,\n  };\n};\n\nexport const setCsvLines = (newLines: Line[]) => {\n  return {\n    type: SET_CSV_LINES,\n    lines: newLines,\n  };\n};\n\nexport const setCurrentLine = (lineIndex: number) => {\n  return {\n    type: SET_CURRENT_LINE,\n    lineIndex,\n  };\n};\n\nexport const setCurrentStep = (step: number) => {\n  return {\n    type: SET_CURRENT_STEP,\n    step,\n  };\n};\n\nexport const cancelImport = () => {\n  return {\n    type: CANCEL_IMPORT,\n  };\n};\n\nexport const deleteTrack = (id: string) => {\n  return {\n    type: DELETE_TRACK,\n    id,\n  };\n};\n\nexport const editTrack = (track: Track) => {\n  return {\n    type: EDIT_TRACK,\n    track,\n  };\n};\n","import React from \"react\";\nimport { Track } from \"../types/types\";\nimport { Card, Avatar, message, Button } from \"antd\";\nimport { useDispatch } from \"react-redux\";\n\ninterface Props {\n  selectedTrack: Track | undefined;\n  handleEdit: (track: Track) => void;\n  goToNextLine: () => void;\n}\n\nconst SelectedTrackCard: React.FC<Props> = ({\n  selectedTrack,\n  handleEdit,\n  goToNextLine,\n}) => {\n  const dispatch = useDispatch();\n  const handleAddTrack = (track: Track) => {\n    if (!track.title) {\n      message.error(\"Titre manquant\");\n      return;\n    }\n    if (!track.artist) {\n      message.error(\"Artiste manquant\");\n      return;\n    }\n    if (!track.year) {\n      message.error(\"Année de sortie manquante\");\n      return;\n    }\n    dispatch({ type: \"ADD_TRACK\", track });\n    goToNextLine();\n  };\n\n  if (selectedTrack) {\n    return (\n      <Card\n        title=\"Morceau sélectionné\"\n        extra={\n          <>\n            <Button onClick={() => handleEdit(selectedTrack)}>Modifier</Button>\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                handleAddTrack(selectedTrack);\n              }}\n            >\n              Ajouter à la playlist\n            </Button>\n          </>\n        }\n      >\n        <Avatar shape=\"square\" size=\"large\" src={selectedTrack.coverImage} />\n        Titre : {selectedTrack.title}\n        Artiste(s) : {selectedTrack.artist}' Année de sortie :{\" \"}\n        {selectedTrack.year || \"?\"}\n      </Card>\n    );\n  }\n  return (\n    <Card title=\"Sélectionner un morceau\">\n      <Avatar shape=\"square\" size=\"large\">\n        ?\n      </Avatar>\n    </Card>\n  );\n};\n\nexport default SelectedTrackCard;\n","import { Button, Row, Col, Space, List } from \"antd\";\nimport { SpotifyApi } from \"../types/spotify\";\nimport { DeezerApi } from \"../types/deezer\";\nimport React, { useEffect, useState } from \"react\";\nimport Player from \"react-audio-player\";\n\nimport EditTrackModal from \"./EditTrackModal\";\nimport { Track } from \"../types/types\";\nimport { spSearchTrack } from \"../api/spotify\";\nimport { dzSearchTrack } from \"../api/deezer\";\nimport {\n  getTrackFromDeezerTrackObject,\n  getTrackFromSpotifyTrackObject,\n} from \"../utils\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../types/store\";\nimport { DeezerTrackListItem, SpotifyTrackListItem } from \"./TrackListItem\";\nimport { setCurrentLine } from \"../store/actions\";\nimport SelectedTrackCard from \"./SelectedTrackCard\";\n\ninterface TrackStepProps {\n  lineAmount: number;\n  index: number;\n  isLastLine: boolean;\n  endIntegration: () => void;\n}\n\nconst TrackStep: React.FC<TrackStepProps> = ({\n  index,\n  isLastLine,\n  endIntegration,\n  lineAmount,\n}) => {\n  const currentCsvLine = useSelector(\n    (state: RootState) => state.csvLines[index]\n  );\n  const dispatch = useDispatch();\n\n  const [spotifyTracks, setSpotifyTracks] = useState<\n    SpotifyApi.TrackObjectFull[]\n  >([]);\n  const [deezerTracks, setDeezerTracks] = useState([]);\n  const [previewUrl, play] = useState<string | null | undefined>();\n  const [selectedTrack, setSelectedTrack] = useState<Track | undefined>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    setSelectedTrack(undefined);\n    setSpotifyTracks([]);\n    setDeezerTracks([]);\n    const search = async () => {\n      const query = currentCsvLine.artist + \" \" + currentCsvLine.title;\n      const spotifySearchResults = await spSearchTrack(query);\n      setSpotifyTracks(spotifySearchResults.tracks.items);\n      const deezerSearchResults = await dzSearchTrack(query);\n      setDeezerTracks(deezerSearchResults.data);\n    };\n    search();\n  }, [currentCsvLine]);\n\n  const selectSpotifyTrack = (track: SpotifyApi.TrackObjectFull) => {\n    const trackObject = getTrackFromSpotifyTrackObject(track);\n    setSelectedTrack(trackObject);\n  };\n\n  const selectDeezerTrack = (track: DeezerApi.TrackObject) => {\n    const trackObject = getTrackFromDeezerTrackObject(track);\n    setSelectedTrack(trackObject);\n  };\n\n  const handleEditSelectedTrack = () => {\n    setIsModalOpen(true);\n  };\n  const goToNextLine = () => {\n    dispatch(setCurrentLine(index + 1));\n  };\n  const goToPreviousLine = () => {\n    dispatch(setCurrentLine(index - 1));\n  };\n\n  return (\n    <Space direction=\"vertical\" size=\"large\">\n      <Player src={previewUrl ? previewUrl : \"\"} autoPlay controls />\n      <Row gutter={24}>\n        <Col span={6}>\n          <Button onClick={goToPreviousLine} disabled={index < 1}>\n            {\"<- Précédent\"}\n          </Button>\n        </Col>\n        <Col span={12}>\n          <h2>\n            {currentCsvLine.title} — {currentCsvLine.artist}\n          </h2>\n          {index + 1}/{lineAmount}\n        </Col>\n        <Col span={6}>\n          {!isLastLine ? (\n            <Button onClick={goToNextLine}>{\"-> Suivant\"}</Button>\n          ) : (\n            <Button onClick={endIntegration}>Terminer l'intégration</Button>\n          )}\n        </Col>\n      </Row>\n\n      <SelectedTrackCard\n        selectedTrack={selectedTrack}\n        handleEdit={handleEditSelectedTrack}\n        goToNextLine={goToNextLine}\n      />\n      <Row gutter={24}>\n        <Col span={12}>\n          <h3>Spotify Tracks</h3>\n          <List\n            dataSource={spotifyTracks}\n            renderItem={(track: SpotifyApi.TrackObjectFull) => {\n              return (\n                <SpotifyTrackListItem\n                  track={track}\n                  play={play}\n                  selectTrack={selectSpotifyTrack}\n                />\n              );\n            }}\n          />\n        </Col>\n        <Col span={12}>\n          <h3>Deezer Tracks</h3>\n          <List\n            dataSource={deezerTracks}\n            renderItem={(track: DeezerApi.TrackObject) => {\n              return (\n                <DeezerTrackListItem\n                  track={track}\n                  play={play}\n                  selectTrack={selectDeezerTrack}\n                />\n              );\n            }}\n          />\n        </Col>\n      </Row>\n      {selectedTrack && (\n        <EditTrackModal\n          track={selectedTrack}\n          visible={isModalOpen}\n          closeModal={() => setIsModalOpen(false)}\n          editTrack={(track: Track) => setSelectedTrack(track)}\n        />\n      )}\n    </Space>\n  );\n};\n\nexport default TrackStep;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Player from \"react-audio-player\";\nimport { RootState } from \"../store/reducers\";\nimport {\n  Button,\n  Table,\n  Divider,\n  Tag,\n  Typography,\n  Avatar,\n  Form,\n  Input,\n  InputNumber,\n  Popconfirm,\n  message,\n} from \"antd\";\nimport {\n  DeleteFilled,\n  CheckOutlined,\n  CaretRightFilled,\n  PauseOutlined,\n} from \"@ant-design/icons\";\n\nimport { Track } from \"../types/types\";\nimport { deleteTrack, editTrack, setCurrentStep } from \"../store/actions\";\n\nconst { Text, Title } = Typography;\nconst { Column } = Table;\n\nconst ValidationStep = () => {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const tracks = useSelector((state: RootState) => state.tracks);\n  const [editingId, setEditingId] = useState(\"\");\n  const [previewUrl, play] = useState<string | null | undefined>();\n\n  const isEditing = (record: Track) => record.id === editingId;\n\n  const edit = (record: Track) => {\n    setEditingId(record.id);\n    form.setFieldsValue({\n      title: \"\",\n      artist: \"\",\n      year: \"\",\n      ...record,\n    });\n  };\n\n  const saveEdits = async (track: Track) => {\n    try {\n      const edits = await form.validateFields();\n      const newTrack = { ...track, ...edits };\n      dispatch(editTrack(newTrack));\n      setEditingId(\"\");\n    } catch (error) {\n      const errorMessage = error.errorFields.map((item: any) => item.errors[0]);\n      message.error(errorMessage);\n    }\n  };\n\n  const cancel = () => {\n    setEditingId(\"\");\n  };\n\n  const handleValidateImport = () => {\n    dispatch(setCurrentStep(3));\n  };\n\n  return (\n    <>\n      <Player src={previewUrl ? previewUrl : \"\"} autoPlay controls />\n      <Button\n        type=\"primary\"\n        icon={<CheckOutlined />}\n        onClick={handleValidateImport}\n      >\n        Valider l'import\n      </Button>\n      <Form form={form} component={false}>\n        <Table\n          title={() => (\n            <Title level={4}>{tracks.length} morceaux sélectionnés</Title>\n          )}\n          dataSource={tracks}\n        >\n          <Column\n            dataIndex=\"coverImage\"\n            key=\"cover\"\n            render={(image, record: Track) => (\n              <>\n                <Avatar shape=\"square\" src={image} />\n                <Divider type=\"vertical\" />\n                {previewUrl !== record.audio ? (\n                  <Button\n                    shape=\"circle\"\n                    onClick={() => {\n                      play(record.audio);\n                    }}\n                    icon={<CaretRightFilled />}\n                  />\n                ) : (\n                  <Button\n                    shape=\"circle\"\n                    onClick={() => {\n                      play(\"\");\n                    }}\n                    icon={<PauseOutlined />}\n                  />\n                )}\n              </>\n            )}\n          />\n          <Column\n            title=\"Titre\"\n            dataIndex=\"title\"\n            key=\"title\"\n            render={(title, record: Track) =>\n              isEditing(record) ? (\n                <Form.Item\n                  noStyle\n                  name=\"title\"\n                  rules={[\n                    {\n                      required: true,\n                      whitespace: true,\n                      message: \"Merci de renseigner un titre\",\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              ) : (\n                <Text ellipsis>{title}</Text>\n              )\n            }\n          />\n          <Column\n            title=\"Artiste(s)\"\n            dataIndex=\"artist\"\n            key=\"artist\"\n            render={(artist, record: Track) =>\n              isEditing(record) ? (\n                <Form.Item\n                  noStyle\n                  name=\"artist\"\n                  rules={[\n                    {\n                      required: true,\n                      whitespace: true,\n                      message: \"Merci de renseigner un artiste\",\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              ) : (\n                <Text ellipsis>{artist}</Text>\n              )\n            }\n          />\n          <Column\n            title=\"Année\"\n            dataIndex=\"year\"\n            key=\"year\"\n            sorter={(a: any, b: any) => a.year - b.year}\n            render={(year, record: Track) =>\n              isEditing(record) ? (\n                <Form.Item\n                  noStyle\n                  name=\"year\"\n                  rules={[{ required: true, message: \"Année manquante\" }]}\n                >\n                  <InputNumber />\n                </Form.Item>\n              ) : (\n                <Text ellipsis>{year}</Text>\n              )\n            }\n          />\n          <Column\n            title=\"Source\"\n            dataIndex=\"provider\"\n            key=\"provider\"\n            render={(provider: \"deezer\" | \"spotify\") => (\n              <Tag color={provider === \"spotify\" ? \"green\" : \"geekblue\"}>\n                {provider.toUpperCase()}\n              </Tag>\n            )}\n          />\n          <Column\n            title=\"Actions\"\n            dataIndex=\"actions\"\n            render={(text: string, record: Track) =>\n              isEditing(record) ? (\n                <>\n                  {\" \"}\n                  <Button onClick={cancel}>Annuler</Button>\n                  <Divider type=\"vertical\" />\n                  <Button\n                    icon={<CheckOutlined />}\n                    type=\"primary\"\n                    onClick={() => saveEdits(record)}\n                  />\n                </>\n              ) : (\n                <>\n                  <Button onClick={() => edit(record)}>Modifier</Button>\n                  <Divider type=\"vertical\" />\n                  <Popconfirm\n                    title=\"Supprimer le morceau ?\"\n                    onConfirm={() => dispatch(deleteTrack(record.id))}\n                    okText=\"Oui\"\n                    cancelText=\"Annuler\"\n                    okType=\"danger\"\n                  >\n                    <Button icon={<DeleteFilled />} />\n                  </Popconfirm>\n                </>\n              )\n            }\n          />\n        </Table>\n      </Form>\n    </>\n  );\n};\n\nexport default ValidationStep;\n","import React from \"react\";\nimport { Result, Button } from \"antd\";\n\nconst ExportStep = () => {\n  const handleJSONDownload = () => {};\n\n  const handleCSVDownload = () => {};\n\n  return (\n    <Result\n      status=\"success\"\n      title=\"L'import est terminé !\"\n      subTitle=\"Tu peux maintenant télécharger le fichier final au format de ton choix.\"\n      extra={[\n        <Button key=\"1\" type=\"primary\" onClick={handleJSONDownload}>\n          Télécharger au format JSON\n        </Button>,\n        <Button key=\"2\" onClick={handleCSVDownload}>\n          Télécharger au format CSV\n        </Button>,\n      ]}\n    />\n  );\n};\n\nexport default ExportStep;\n","import { Button, Steps, Upload, Space } from \"antd\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport Papa from \"papaparse\";\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport TrackStep from \"./TrackStep\";\nimport { Line } from \"../types/types\";\nimport { RootState } from \"../store/reducers\";\nimport { setCsvLines, setCurrentStep, cancelImport } from \"../store/actions\";\nimport ValidationStep from \"./ValidationStep\";\nimport ExportStep from \"./ExportStep\";\n\nconst { Step } = Steps;\n\nconst Dashboard: React.FC = () => {\n  const dispatch = useDispatch();\n  const csvLines = useSelector((state: RootState) => state.csvLines);\n  const currentLine = useSelector((state: RootState) => state.currentLine);\n  const currentStep = useSelector((state: RootState) => state.currentStep);\n  const [isParsing, setIsParsing] = useState(false);\n  const onFileUpload = (file: File) => {\n    if (file.type !== \"text/csv\") {\n      return false;\n    }\n    const papaConfig = {\n      skipEnmptyLines: true,\n      fastMode: true,\n      before: () => {\n        setIsParsing(true);\n      },\n      complete: (results: any) => {\n        if (results.data[0].length !== 3) {\n          console.log(\"not the right format!\");\n          return;\n        }\n        const lines: Line[] = results.data.map((line: any) => {\n          return { artist: line[1], title: line[2] };\n        });\n        dispatch(setCsvLines(lines));\n        setIsParsing(false);\n      },\n    };\n    Papa.parse(file, papaConfig);\n    return false;\n  };\n  const startIntegration = () => {\n    dispatch(setCurrentStep(1));\n  };\n  const endIntegration = () => {\n    dispatch(setCurrentStep(2));\n  };\n  return (\n    <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\n      <Steps current={currentStep}>\n        <Step title=\"Import CSV\" />\n        <Step title=\"Intégration des morceaux\" />\n        <Step title=\"Validation\" />\n        <Step title=\"Export\" />\n      </Steps>\n      <Button onClick={() => dispatch(cancelImport())}>Annuler l'import</Button>\n      <div>\n        {currentStep === 0 && (\n          <div>\n            <div>\n              {csvLines.length <= 0 && (\n                <Upload.Dragger\n                  accept=\".csv\"\n                  beforeUpload={onFileUpload}\n                  name=\"file\"\n                  multiple={false}\n                  showUploadList={false}\n                >\n                  <InboxOutlined />\n                  <p>Glisser-déposer un fichier CSV pour commencer</p>\n                </Upload.Dragger>\n              )}\n              {isParsing && \"Loading...\"}\n              {csvLines.length > 0 && (\n                <Button type=\"primary\" onClick={startIntegration}>\n                  Commencer l'intégration\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {currentStep === 1 && (\n          <TrackStep\n            lineAmount={csvLines.length}\n            index={currentLine}\n            isLastLine={currentLine === csvLines.length - 1}\n            endIntegration={endIntegration}\n          />\n        )}\n        {currentStep === 2 && <ValidationStep />}\n        {currentStep === 3 && <ExportStep />}\n      </div>\n    </Space>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\n\nconst Playlists: React.FC = () => {\n  return <div>Playlists</div>;\n};\n\nexport default Playlists;\n","import React from \"react\";\n\nconst Home: React.FC = () => <p>Home :) :) :) </p>;\n\nexport default Home;\n","import { Layout as AntLayout, Menu } from \"antd\";\nimport React from \"react\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { NavLink } from \"react-router-dom\";\n\nconst AntHeader = AntLayout.Header;\n\nconst Header: React.FC = () => {\n  return (\n    <AntHeader\n      style={{\n        backgroundColor: \"white\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <strong>[WTT import]</strong>\n      <Menu theme=\"light\" mode=\"horizontal\">\n        <Menu.Item key=\"1\">\n          <NavLink to=\"/import\">\n            <PlusCircleOutlined /> Nouvelle playlist\n          </NavLink>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n          <NavLink to=\"/playlists\">Playlists</NavLink>\n        </Menu.Item>\n      </Menu>\n    </AntHeader>\n  );\n};\n\nexport default Header;\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Layout as AntLayout } from \"antd\";\nimport React from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport Playlists from \"./components/Playlists\";\nimport Home from \"./components/Home\";\nimport Header from \"./components/Header\";\n\nconst { Content } = AntLayout;\n\nconst Routes: React.FC = () => {\n  return (\n    <AntLayout style={{ height: \"100vh\" }}>\n      <Router>\n        <Header />\n        <Content style={{ height: \"100%\" }}>\n          <div\n            style={{\n              backgroundColor: \"white\",\n              padding: \"40px\",\n              margin: \"40px\",\n            }}\n          >\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/playlists\" component={Playlists} />\n              <Route path=\"/import\" component={Dashboard} />\n            </Switch>\n          </div>\n        </Content>\n      </Router>\n    </AntLayout>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\nimport Store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport Routes from \"./Routes\";\n\nconst { store, persistor } = Store();\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <Routes />\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst rootEl = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootEl);\n\nif (module.hot) {\n  module.hot.accept(\"./App\", () => {\n    const NextApp = require(\"./App\").default;\n    ReactDOM.render(<NextApp />, rootEl);\n  });\n}\n"],"sourceRoot":""}